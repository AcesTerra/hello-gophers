Golang Basics
Hello Gophers ... this is An Introduction to Golang
27 Aug 2019
Tags: coders, programming, golang

Obed N Munoz
Cloud Software Engineer
obed.n.munoz@gmail.com
http://obedmr.com
@_obedmr

* Agenda
- *YaPL?* - Yet another Programming Language?
- The origin of The *Gophermania*
- *Who* in the world is using it?
- *Why* I should care?
- *People* want to `code`
- Handy *stuff* (links, books, videos, etc)


* YaPL? - Yet another Programming Language?
- Initially for large scale systems at Google
- Compiled languages advantages
- Takes the best of the most successful programming languages
- _"Complexity_ _is_ _multiplicative"_ by Rob Pike
- Looking for a distributed by design alternative


* The origin of The Gophermania
- At Google in 2009 by Robert Griesemer, Rob Pike, and Ken Thompson
- Influenced by Niklaus Wirth,  Pascal and Modula-2 inspired the package concept
- Sometimes called "C for the 21st century"
- Came from an explosion of complexity


* Why I should care?
- Highly used and required in most of Cloud Service Providers
- Distributed by design
- Simplicity
- The Golang Tooling makes your code pretty :)


- Concurrency is not parallelism - _from_ *Go* *Proverbs*
- Don't communicate bt sharing memory, share memory by communicating - _from_ *Go* *Proverbs*

* People want to code (Program Structure)
.play -edit src/00/main.go


* Program Structure (1/2)
.link https://github.com/adonovan/gopl.io/blob/master/ch1/echo1/main.go echo1 example
.code gopl.io/ch1/echo1/main.go  /package /,/^}/

* Program Structure (1/2)
.link https://github.com/adonovan/gopl.io/blob/master/ch1/dup3/main.go dup3 example
.code gopl.io/ch1/dup3/main.go  /func /,/^}/

* Basic and Composite types (1/3)
- Integers
- Float
- Complex numbers
- Booleans
- Strings
- Constants
- Arrays
- Slices
- Maps
- Structs
- JSON
- Text and HTML templates


* Basic and Composite types (2/3)
.link https://github.com/adonovan/gopl.io/blob/master/ch3/surface/main.go Basic types (surface)
.code gopl.io/ch3/surface/main.go  /const /,/^\)/
.code gopl.io/ch3/surface/main.go  /var /,/angle\)/


* Basic and Composite types (3/3)
.link https://github.com/adonovan/gopl.io/blob/master/ch4/append/main.go Composite types (slices)
 letters := []string{"a", "b", "c", "d"}

 func make([]T, len, cap) []T

 var s []byte
 s = make([]byte, 5, 5)
 // s == []byte{0, 0, 0, 0, 0}

.link https://blog.golang.org/go-slices-usage-and-internals Golang Slices link

* Let's code: Slices and Maps in Go

- Follow instructions from:
[[https://github.com/CodersSquad/ap-labs/tree/master/labs/go-slices-maps]]

* Functions vs Methods
.link https://github.com/adonovan/gopl.io/blob/master/ch6/geometry/geometry.go Geometry example

*Struct*
.code gopl.io/ch6/geometry/geometry.go /type Point /,/ }/

*Function*
.code gopl.io/ch6/geometry/geometry.go /func Distance/,/}/

*Method*
.code gopl.io/ch6/geometry/geometry.go /func \(p Point\)/,/}/


* Let's code: Functions and Methods in Go

- Follow instructions from:
[[https://github.com/CodersSquad/ap-labs/tree/master/labs/go-functions-methods]]


* Goroutines
In Go, each concurrently executing activity is called a _goroutine_.

When a program starts, its only goroutine is the one that calls the main function. It's called the _main_goroutine_.

  f()       // call f(); wait for it to return
  go f()    // create a new goroutine that calls f(); don't wait



* Channels
If goroutines are the activities of a concurrent Go program, *channels* are the connections between them.

- A *channel* is a communication mechanism that lets one goroutine send values to another goroutine.

- A *channel* is a _reference_ to the data structure created by _make_

- A *channel* has 2 operations, _send_ and _receive_, also known as _communications_.


  ch := make(chan int) // ch has type 'chan int'

  ch <- x  // a send statement

  x = <-ch // a receive expression in an assignment statement
  <-ch     // a receive statement; result is discarded

  close(ch) // To close a channel


* Handy Stuff
- *The* *Golang* *Tour* - https://tour.golang.org/welcome/1
- *Golang* *Blog* - https://blog.golang.org/
- *Golang* *Documentation* - https://golang.org/doc/
- *Effective* *Go* - https://golang.org/doc/effective_go.html
- *Youtube* - _Just_ _For_ _Func_
- *Book* The Go Programming Language *by* Donovan and Kernighan
- *Go* *Proverbs* https://go-proverbs.github.io/
- *Conference* - https://www.gophercon.com/
